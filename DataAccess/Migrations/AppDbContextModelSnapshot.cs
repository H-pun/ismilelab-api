// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SealabAPI.DataAccess;

#nullable disable

namespace SealabAPI.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SealabAPI.DataAccess.Entities.Assistant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uuid")
                        .HasColumnName("id_user");

                    b.Property<string>("Position")
                        .HasColumnType("text")
                        .HasColumnName("position");

                    b.HasKey("Id")
                        .HasName("pk_assistant");

                    b.HasIndex("IdUser")
                        .HasDatabaseName("ix_assistant_id_user");

                    b.ToTable("assistant", (string)null);
                });

            modelBuilder.Entity("SealabAPI.DataAccess.Entities.PreliminaryAssignmentAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Answer")
                        .HasColumnType("text")
                        .HasColumnName("answer");

                    b.Property<Guid>("IdQuestion")
                        .HasColumnType("uuid")
                        .HasColumnName("id_question");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uuid")
                        .HasColumnName("id_user");

                    b.HasKey("Id")
                        .HasName("pk_preliminary_assignment_answer");

                    b.HasIndex("IdQuestion")
                        .HasDatabaseName("ix_preliminary_assignment_answer_id_question");

                    b.HasIndex("IdUser")
                        .HasDatabaseName("ix_preliminary_assignment_answer_id_user");

                    b.ToTable("preliminary_assignment_answer", (string)null);
                });

            modelBuilder.Entity("SealabAPI.DataAccess.Entities.PreliminaryAssignmentQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AnswerKey")
                        .HasColumnType("text")
                        .HasColumnName("answer_key");

                    b.Property<string>("FilePath")
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<int>("Module")
                        .HasColumnType("integer")
                        .HasColumnName("module");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_preliminary_assignment_question");

                    b.ToTable("preliminary_assignment_question", (string)null);
                });

            modelBuilder.Entity("SealabAPI.DataAccess.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Classroom")
                        .HasColumnType("text")
                        .HasColumnName("classroom");

                    b.Property<string>("Day")
                        .HasColumnType("text")
                        .HasColumnName("day");

                    b.Property<int>("Group")
                        .HasColumnType("integer")
                        .HasColumnName("group");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uuid")
                        .HasColumnName("id_user");

                    b.Property<int>("Shift")
                        .HasColumnType("integer")
                        .HasColumnName("shift");

                    b.HasKey("Id")
                        .HasName("pk_student");

                    b.HasIndex("IdUser")
                        .HasDatabaseName("ix_student_id_user");

                    b.ToTable("student", (string)null);
                });

            modelBuilder.Entity("SealabAPI.DataAccess.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AppToken")
                        .HasColumnType("text")
                        .HasColumnName("app_token");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Nim")
                        .HasColumnType("text")
                        .HasColumnName("nim");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("Role")
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("SealabAPI.DataAccess.Entities.Assistant", b =>
                {
                    b.HasOne("SealabAPI.DataAccess.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assistant_user_id_user");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SealabAPI.DataAccess.Entities.PreliminaryAssignmentAnswer", b =>
                {
                    b.HasOne("SealabAPI.DataAccess.Entities.PreliminaryAssignmentQuestion", "Question")
                        .WithMany()
                        .HasForeignKey("IdQuestion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_preliminary_assignment_answer_preliminary_assignment_questi");

                    b.HasOne("SealabAPI.DataAccess.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_preliminary_assignment_answer_user_id_user");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SealabAPI.DataAccess.Entities.Student", b =>
                {
                    b.HasOne("SealabAPI.DataAccess.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_user_id_user");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
